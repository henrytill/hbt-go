// Begin code generated by testgen

package test

//go:generate go run testgen.go

import (
	"testing"
)

func TestHTMLBookmarksFeedsHTML(t *testing.T) {
	RunHbtAndCompare(t, "html", "testdata/html/bookmarks_feeds.input.html", "testdata/html/bookmarks_feeds.expected.html")
}

func TestHTMLBookmarksFeedsYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/html/bookmarks_feeds.input.html", "testdata/html/bookmarks_feeds.expected.yaml")
}

func TestHTMLBookmarksFoldersHTML(t *testing.T) {
	RunHbtAndCompare(t, "html", "testdata/html/bookmarks_folders.input.html", "testdata/html/bookmarks_folders.expected.html")
}

func TestHTMLBookmarksFoldersYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/html/bookmarks_folders.input.html", "testdata/html/bookmarks_folders.expected.yaml")
}

func TestHTMLBookmarksPinboardHTML(t *testing.T) {
	RunHbtAndCompare(t, "html", "testdata/html/bookmarks_pinboard.input.html", "testdata/html/bookmarks_pinboard.expected.html")
}

func TestHTMLBookmarksPinboardYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/html/bookmarks_pinboard.input.html", "testdata/html/bookmarks_pinboard.expected.yaml")
}

func TestHTMLBookmarksPrivacyHTML(t *testing.T) {
	RunHbtAndCompare(t, "html", "testdata/html/bookmarks_privacy.input.html", "testdata/html/bookmarks_privacy.expected.html")
}

func TestHTMLBookmarksPrivacyYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/html/bookmarks_privacy.input.html", "testdata/html/bookmarks_privacy.expected.yaml")
}

func TestHTMLBookmarksSimpleHTML(t *testing.T) {
	RunHbtAndCompare(t, "html", "testdata/html/bookmarks_simple.input.html", "testdata/html/bookmarks_simple.expected.html")
}

func TestHTMLBookmarksSimpleYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/html/bookmarks_simple.input.html", "testdata/html/bookmarks_simple.expected.yaml")
}

func TestJSONJSONSampleYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/pinboard/json/json_sample.input.json", "testdata/pinboard/json/json_sample.expected.yaml")
}

func TestMarkdownBasicYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/basic.input.md", "testdata/markdown/basic.expected.yaml")
}

func TestMarkdownDescendingDatesYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/descending_dates.input.md", "testdata/markdown/descending_dates.expected.yaml")
}

func TestMarkdownEmptyLinkYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/empty_link.input.md", "testdata/markdown/empty_link.expected.yaml")
}

func TestMarkdownIndentedDoubleYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/indented_double.input.md", "testdata/markdown/indented_double.expected.yaml")
}

func TestMarkdownIndentedYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/indented.input.md", "testdata/markdown/indented.expected.yaml")
}

func TestMarkdownInvertedParentYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/inverted_parent.input.md", "testdata/markdown/inverted_parent.expected.yaml")
}

func TestMarkdownInvertedSingleParentYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/inverted_single_parent.input.md", "testdata/markdown/inverted_single_parent.expected.yaml")
}

func TestMarkdownLabelYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/label.input.md", "testdata/markdown/label.expected.yaml")
}

func TestMarkdownLabelsYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/labels.input.md", "testdata/markdown/labels.expected.yaml")
}

func TestMarkdownLinkTextWithBackticksYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/link_text_with_backticks.input.md", "testdata/markdown/link_text_with_backticks.expected.yaml")
}

func TestMarkdownMixedDatesYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/mixed_dates.input.md", "testdata/markdown/mixed_dates.expected.yaml")
}

func TestMarkdownMixedLinkTextWithBackticksYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/mixed_link_text_with_backticks.input.md", "testdata/markdown/mixed_link_text_with_backticks.expected.yaml")
}

func TestMarkdownMultipleLabelsYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/multiple_labels.input.md", "testdata/markdown/multiple_labels.expected.yaml")
}

func TestMarkdownNestedYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/nested.input.md", "testdata/markdown/nested.expected.yaml")
}

func TestMarkdownNoLabelsYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/no_labels.input.md", "testdata/markdown/no_labels.expected.yaml")
}

func TestMarkdownNoTitleYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/no_title.input.md", "testdata/markdown/no_title.expected.yaml")
}

func TestMarkdownNoURLYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/no_url.input.md", "testdata/markdown/no_url.expected.yaml")
}

func TestMarkdownOnlyDateYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/only_date.input.md", "testdata/markdown/only_date.expected.yaml")
}

func TestMarkdownParentYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/parent.input.md", "testdata/markdown/parent.expected.yaml")
}

func TestMarkdownParentsIndentedYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/parents_indented.input.md", "testdata/markdown/parents_indented.expected.yaml")
}

func TestMarkdownParentsYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/parents.input.md", "testdata/markdown/parents.expected.yaml")
}

func TestMarkdownSingleParentYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/single_parent.input.md", "testdata/markdown/single_parent.expected.yaml")
}

func TestMarkdownUpdateYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/markdown/update.input.md", "testdata/markdown/update.expected.yaml")
}

func TestXMLEmptyYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/pinboard/xml/empty.input.xml", "testdata/pinboard/xml/empty.expected.yaml")
}

func TestXMLXMLSampleYAML(t *testing.T) {
	RunHbtAndCompare(t, "yaml", "testdata/pinboard/xml/xml_sample.input.xml", "testdata/pinboard/xml/xml_sample.expected.yaml")
}

// End
